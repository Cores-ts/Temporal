// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type FakePublisher struct {
	PublishMessageStub        func(interface{}) error
	publishMessageMutex       sync.RWMutex
	publishMessageArgsForCall []struct {
		arg1 interface{}
	}
	publishMessageReturns struct {
		result1 error
	}
	publishMessageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePublisher) PublishMessage(arg1 interface{}) error {
	fake.publishMessageMutex.Lock()
	ret, specificReturn := fake.publishMessageReturnsOnCall[len(fake.publishMessageArgsForCall)]
	fake.publishMessageArgsForCall = append(fake.publishMessageArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("PublishMessage", []interface{}{arg1})
	fake.publishMessageMutex.Unlock()
	if fake.PublishMessageStub != nil {
		return fake.PublishMessageStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.publishMessageReturns
	return fakeReturns.result1
}

func (fake *FakePublisher) PublishMessageCallCount() int {
	fake.publishMessageMutex.RLock()
	defer fake.publishMessageMutex.RUnlock()
	return len(fake.publishMessageArgsForCall)
}

func (fake *FakePublisher) PublishMessageCalls(stub func(interface{}) error) {
	fake.publishMessageMutex.Lock()
	defer fake.publishMessageMutex.Unlock()
	fake.PublishMessageStub = stub
}

func (fake *FakePublisher) PublishMessageArgsForCall(i int) interface{} {
	fake.publishMessageMutex.RLock()
	defer fake.publishMessageMutex.RUnlock()
	argsForCall := fake.publishMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePublisher) PublishMessageReturns(result1 error) {
	fake.publishMessageMutex.Lock()
	defer fake.publishMessageMutex.Unlock()
	fake.PublishMessageStub = nil
	fake.publishMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePublisher) PublishMessageReturnsOnCall(i int, result1 error) {
	fake.publishMessageMutex.Lock()
	defer fake.publishMessageMutex.Unlock()
	fake.PublishMessageStub = nil
	if fake.publishMessageReturnsOnCall == nil {
		fake.publishMessageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishMessageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePublisher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMessageMutex.RLock()
	defer fake.publishMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePublisher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
